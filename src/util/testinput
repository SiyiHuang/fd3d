#!/usr/bin/env python
import sys
sys.path.insert(0, '../bin')
from numpy import zeros, array, int8, complex64
from optparse import OptionParser
from material import Vac
from const import *

def create_mcode_file(sim, basename):
	'''Create a file of material codes.'''
	mc_array = zeros((sim.get_N(Zz), sim.get_N(Yy), sim.get_N(Xx)), int8)
	'''First, draw the background objects.'''
	for n in xrange(len(sim.bg_objList)):
		obj = sim.bg_objList[n]
		obj.draw3d(mc_array)

	'''Next, overwrite the figure with the foreground objects.'''
	for n in xrange(len(sim.objList)):
		obj = sim.objList[n]
		obj.draw3d(mc_array)

	'''Finally, draw the PML, because it has priority in visualization.'''
	obj = sim.pml_object
	obj.draw3d(mc_array)

	filename = basename + '.mc'
	mc_array.tofile(filename)

def create_eps_file(sim, basename):
	'''Create a file of the electric permittivity of the structure defined in sim.'''
	eps_array = zeros((sim.get_N(Zz), sim.get_N(Yy), sim.get_N(Xx)), complex64)
	for k in xrange(sim.get_N(Zz)):
		for j in xrange(sim.get_N(Yy)):
			for i in xrange(sim.get_N(Xx)):
				eps_array[k,j,i] = sim.get_eps_at_kernel([i,j,k])  # sim.get_eps_node_at_kernel() iterates over 3 Nx Ny Nz points, whereas here we want to iterates over Nx Ny Nz points.
	filename = basename + '.eps'
	eps_array.tofile(filename)

def create_eps_tensor_file(sim, basename):
	'''Create a file of the electric permittivity tensor of the structure defined in sim.'''
	eps_tensor_array = zeros((sim.get_N(Zz), sim.get_N(Yy), sim.get_N(Xx), 3), complex64)
	for k in xrange(sim.get_N(Zz)):
		for j in xrange(sim.get_N(Yy)):
			for i in xrange(sim.get_N(Xx)):
				for axis in xrange(Naxis):
					eps_tensor_array[k,j,i,axis] = sim.get_eps_at(axis,i,j,k)
	filename = basename + '.3eps'
	eps_tensor_array.tofile(filename)

def create_mu_file(sim, basename):
	'''Create a file of the magnetic permeability of the structure defined in sim.'''
	mu_array = zeros((sim.get_N(Zz), sim.get_N(Yy), sim.get_N(Xx)), complex64)
	for k in xrange(sim.get_N(Zz)):
		for j in xrange(sim.get_N(Yy)):
			for i in xrange(sim.get_N(Xx)):
				mu_array[k,j,i] = sim.get_mu_at_kernel([i,j,k])
	filename = basename + '.mu'
	mu_array.tofile(filename)

def draw(sim, normal_dir, pos, on_real_axes=True):
	'''Draw the material structure defined in sim.'''
	from viewer import view
	length_scale = 1e9
	h_axis = (normal_dir+1) % Naxis
	v_axis = (normal_dir+2) % Naxis
	h_label = AxisName[(normal_dir+1) % Naxis]
	v_label = AxisName[(normal_dir+2) % Naxis]
	Nh = sim.get_N(h_axis)+1 
	Nv = sim.get_N(v_axis)+1
	C = zeros((Nh,Nv), int8)
	h_prim = []
	v_prim = []
	if on_real_axes:
		for i in xrange(Nh):
			h_prim = h_prim + [sim.grid.get_L_at(h_axis, i)]
		h0 = sum(sim.grid.d_prim[h_axis][:sim.get_Npml(h_axis,Neg)])
		#h0 = 0
		h_prim = map(lambda x:(x-h0)*sim.grid.get_length_unit()*length_scale, h_prim)

		for i in xrange(Nv):
			v_prim = v_prim + [sim.grid.get_L_at(v_axis, i)]
		v0 = sum(sim.grid.d_prim[v_axis][:sim.get_Npml(v_axis,Neg)])
		#v0 = 0
		v_prim = map(lambda x:(x-v0)*sim.grid.get_length_unit()*length_scale, v_prim)

		h_label = h_label + '(nm)'
		v_label = v_label + '(nm)'
	else:
		h_prim = range(Nh)
		h0 = sim.get_Npml(h_axis,Neg)
		#h0 = 0
		h_prim = map(lambda x:(x-h0), h_prim)

		v_prim = range(Nv)
		v0 = sim.get_Npml(v_axis,Neg)
		#v0 = 0
		v_prim = map(lambda x:(x-v0), v_prim)

	'''First, draw the background objects.'''
	c_range = [Vac.get_color_index(), Vac.get_color_index()]
	for n in xrange(len(sim.bg_objList)):
		obj = sim.bg_objList[n]
		c_range = update_minmax(c_range, obj.get_color_index())
		obj.draw(C, normal_dir, pos)

	'''Next, overwrite the figure with the foreground objects.'''
	for n in xrange(len(sim.objList)):
		obj = sim.objList[n]
		c_range = update_minmax(c_range, obj.get_color_index())
		obj.draw(C, normal_dir, pos)

	'''Finally, draw the PML, because it has priority in visualization.'''
	obj = sim.pml_object
	c_range = update_minmax(c_range, obj.get_color_index())
	obj.draw(C, normal_dir, pos)

	view(C, h_label, v_label, c_range, h_prim, v_prim, on_real_axes)

'''Parse options.'''
parser = OptionParser(usage='%prog [OPTION] INPUT_NAME.py\nTest the integrity of INPUT_NAME.py.')
parser.add_option('-x', default=-1, type='int', help='draw the structure in the x=X plane')
parser.add_option('-y', default=-1, type='int', help='draw the structure in the y=Y plane')
parser.add_option('-z', default=-1, type='int', help='draw the structure in the z=Z plane')
parser.add_option('-m', default='[0,0,0]', metavar='[x,y,z]', help='probe eps and mu at [x,y,z]')
parser.add_option('-s', default='[Zz,0,0,0]', metavar='[Ww,x,y,z]', help='probe the source J in the Ww polarization at [x,y,z], where Ww is one of Xx,Yy,Zz')
parser.add_option('--eps', action='store_true', help='generate an eps file')
parser.add_option('--eps_tensor', action='store_true', help='generate an eps tensor file')
parser.add_option('--mu', action='store_true', help='generate an eps file')
parser.add_option('--mc', action='store_true', help='generate a material code file')
(options, args) = parser.parse_args()

'''Read the input file.'''
name = args[0]
basename = name[0:-3]
file = open(name, 'r')
exec(file)

'''Run various tests.  You can add more test commands.'''
material_probe = eval(options.m)  # convert, e.g., '[1,2,3]' to [1,2,3]
source_probe = eval(options.s)  # convert, e.g., '[Zz,1,2,3]' to [2,1,2,3]
sim.runtest(material_probe, source_probe)
if options.x >= 0 and options.x <= sim.get_N(Xx):
	draw(sim, Xx, options.x)
if options.y >= 0 and options.y <= sim.get_N(Yy):
	draw(sim, Yy, options.y)
if options.z >= 0 and options.z <= sim.get_N(Zz):
	draw(sim, Zz, options.z)
if options.eps:
	print 'Generating an .eps file...'
	create_eps_file(sim, basename)
if options.eps_tensor:
	print 'Generating an .3eps file...'
	create_eps_tensor_file(sim, basename)
if options.mu:
	print 'Generating an .mu file...'
	create_mu_file(sim, basename)
if options.mc:
	print 'Generating an .mc file...'
	create_mcode_file(sim, basename)
